from functools import total_ordering
import math

@total_ordering
class LiczbaZespolona:
    def __init__(self, re = 0, im = 0):
        self.re = re
        self.im = im
        
    def __str__(self):
        return "({0}, {1})".format(self.re, self.im)

    def __repr__(self):
        return "{0}+{1}j".format(self.re, self.im)
    
    def __abs__(self):
         return math.sqrt(self.re ** 2 + self.im ** 2)
    
    def __lt__(self, other):
        if isinstance(self, LiczbaZespolona): 
            return abs(self) < abs(other)
        
        return abs(self) < other

    def __eq__(self, other):
        if isinstance(other, LiczbaZespolona): 
            return self.re == other.re and self.im == other.im
        
        return abs(self) == other

    def __add__(self, other):
        if isinstance(other, LiczbaZespolona): 
            return LiczbaZespolona(self.re + other.re, self.im + other.im)

        return LiczbaZespolona(self.re + other, self.im)

    __radd__ = __add__ 
    
    def __sub__(self, other):
        if isinstance(other, LiczbaZespolona): 
            return LiczbaZespolona(self.re - other.re, self.im - other.im)

        return LiczbaZespolona(self.re - other, self.im)
    
    def __rsub__(self, other):
        return LiczbaZespolona(other - self.re, self.im)
    
    def __mul__(self, other):
        if isinstance(other, LiczbaZespolona):
            return LiczbaZespolona((self.re * other.re) - (self.im * other.im), (self.re * other.im) + (self.im * other.re))
        
        return LiczbaZespolona(self.re * other, self.im * other)

    __rmul__ = __mul__ 
    
    def __truediv__(self, other):
        if isinstance(other, LiczbaZespolona):
            m = other.re ** 2 + other.im ** 2
            return LiczbaZespolona((self.re * other.re + self.im * other.im) / m, 
                                   (self.im * other.re - self.re * other.im) / m)

        return LiczbaZespolona(self.re / other, self.im / other)

    def __rtruediv__(self, other):
        return LiczbaZespolona(other, 0) / self